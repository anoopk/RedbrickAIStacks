Resources:
  CognitoUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      # Generate a name based on the stage
      UserPoolName: ${self:custom.client}-${self:custom.stage}-userpool-${self:custom.stack}
      UserPoolTags: {"client": "${self:custom.client}"}
      # Set email as an alias
      UsernameAttributes:
        - email
      AutoVerifiedAttributes:
        - email

  CognitoUserPoolGroupA:
      Type: AWS::Cognito::UserPoolGroup
      Properties: 
        RoleArn : arn:aws:iam::078421894314:role/redbrickai-projects-dev-CognitoAuthRole-1LTQUK2KKWYJJ
        Description: "Tenant specific group"
        GroupName: admin
        UserPoolId:
          Ref: CognitoUserPool #Refers to the user pool created above        

  CognitoUserPoolGroupB:
      Type: AWS::Cognito::UserPoolGroup
      Properties: 
        RoleArn : arn:aws:iam::078421894314:role/redbrickai-projects-dev-CognitoAuthRole-1LTQUK2KKWYJJ
        Description: "Tenant specific group"
        GroupName: engineer
        UserPoolId:
          Ref: CognitoUserPool #Refers to the user pool created above        
          
  CognitoUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      # Generate an app client name based on the stage
      ClientName: ${self:custom.client}-${self:custom.stage}-userpoolclient
      UserPoolId:
        Ref: CognitoUserPool
      ExplicitAuthFlows:
        - ADMIN_NO_SRP_AUTH
      GenerateSecret: false

# Print out the Id of the User Pool that is created
Outputs:
  UserPoolId:
    Value:
      Ref: CognitoUserPool

  UserPoolClientId:
    Value:
      Ref: CognitoUserPoolClient
